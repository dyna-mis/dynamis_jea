#!/usr/bin/env python2
# -*- coding: utf-8 -*-
"""
Created on Sun Dec  1 12:17:03 2019

@author: guangping
"""
import math
import numpy as np
from enum import Enum
from operator import add
import os
import json
import decimal
D = decimal.Decimal
import collections

def algo_partition(path, mod, model):
    dic = {
        "line": [],
        "g-line": [],
        "MIS-graph": [],
        "g-MIS-graph": [],
           }
    for x in path.iterdir():
        if x.is_file():
            if mod in x.name and model in x.name:
                if "greG" in x.name:
                    dic["g-MIS-graph"].append(x.name)
                elif "graph" in x.name:
                    dic["MIS-graph"].append(x.name)
                elif "line" in x.name:
                    if "greedy" in x.name:
                        dic["g-line"].append(x.name)
                    else:
                        dic["line"].append(x.name)
    for key, value in dic.items():
        assert len(dic[key]) == 1, key

    return dic




def Average(lst): 
    return sum(lst) / len(lst)
def merge_dols(dol1, dol2):
    for key, value in dol1.items():
        dol1[key] = dol1[key] + dol2[key]
    return dol1

def decimalList(l):
    l_new = []
    for i in l:
        l_new.append(float (D(i)))
    return l_new
def turnDict(data_s):
    for key,value in data_s.items():
        if key == "info":
            continue
        if not isinstance(data_s[key], list):
            data_s[key] = [D(value)]
    return data_s


def decimalDict(d):
    for key,value in d.items():
        if key == "updateType":
            continue
        else: d[key] = decimalList(value)


# for one category, one mod and one algo, one size
class folder:
    files = []
    size = 100000
    file_type = 0
    algo_type = 0
    mod_type = 0
    f_data = {"updateSize":[],
            "updateTime":[]}
    def print_info(self):
       print("path: ",self.files)
       print("size: ",self.size)
       print("generated by: ", self.file_type)
       print("algo: ", self.algo_type)
       print("mod: ", self.mod_type)

    def convert(self, name1, name2):
        self.f_data.update({name2:[x/1000000 for x in self.f_data[name1]]})



    def merge(self,name1,name2, sumName):
        self.f_data.update({sumName:list(map(add,self.f_data[name1], self.f_data[name2]))})

    def get_data(self):
        self.f_data = {"updateSize": [],
                  "updateTime": []}
        for filename in self.files:
            with open(os.path.join(self.path, filename)) as json_file:
                self.f_data = merge_dols(turnDict(self.f_data),turnDict(json.load(json_file)))
        decimalDict(self.f_data)
        self.convert('updateTime','updateFullTime_milisecond')

    def __init__(self,result_path, files, algo_t, mod, model):
        self.path = result_path
        self.files = files
        self.algo_type = algo_t
        self.file_type = model
        self.mod_type = mod
    def printDATA(self):
        print("data: ")
        print(self.f_data)
        print(self.f_data.keys())
#/home/guangping/dev/RESULT/add/GAUSSIAN/1000/(all algorithms)



class folderList:
    fL_data = collections.OrderedDict()
    def print_info(self):
     for key,value in self.data.items():
         #print key,
         value.print_info()

    def __init__(self, result_path,mod, model, skip):
        algo_dic = algo_partition(result_path, mod, model)
        objs = list()
        for key, value in algo_dic.items():
            objs.append(folder(result_path, value, key, mod, model))
            objs[-1].get_data()
            e = objs[-1].algo_type
            self.fL_data.update({e: objs[-1]})
